local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local client = Players.LocalPlayer

-- üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Hunger ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
local HUNGER_THRESHOLD = 20  -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ Hunger ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ
local HUNGER_MAX = 100       -- ‚úÖ ‡∏Å‡∏¥‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
local function moveToPosition(targetPosition)
    local character = client.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    if not humanoid or not rootPart then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠ HumanoidRootPart!")
        return
    end

    humanoid:MoveTo(targetPosition)

    while (rootPart.Position - targetPosition).Magnitude > 2 do
        RunService.Heartbeat:Wait()

        if humanoid.MoveDirection.Magnitude == 0 then
            humanoid:MoveTo(targetPosition)
        end
    end

    humanoid.MoveToFinished:Wait()
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (%)
local function getHungerPercent()
    local hungerUI = client.PlayerGui:FindFirstChild("Main")
        and client.PlayerGui.Main:FindFirstChild("HUD")
        and client.PlayerGui.Main.HUD:FindFirstChild("Hunger")
        and client.PlayerGui.Main.HUD.Hunger:FindFirstChild("Clipping")

    return hungerUI and (hungerUI.Size.X.Scale * 100) or 100
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏ô Backpack ‡∏°‡∏µ Chicken ‡πÑ‡∏´‡∏°
local function hasChickenInBackpack()
    local backpack = client:FindFirstChild("Backpack")
    if not backpack then return false end

    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") and item.Name == "Chicken" then
            return item -- ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Chicken ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        end
    end
    return false -- ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Chicken
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏¥‡∏ô Chicken ‡∏à‡∏≤‡∏Å Backpack ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏°
local function eatChickenUntilFull()
    while getHungerPercent() < HUNGER_MAX do
        local chicken = hasChickenInBackpack()
        if not chicken then
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Chicken ‡πÉ‡∏ô Backpack ‡πÅ‡∏•‡πâ‡∏ß! ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏¥‡∏ô")
            return false
        end
        
        print("üçó Hunger ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ " .. HUNGER_MAX .. "% ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô Chicken...")
        client.Character.Humanoid:EquipTool(chicken)
        wait(0.3)
        chicken:Activate()
        wait(1)
    end
    print("‚úÖ Hunger ‡πÄ‡∏ï‡πá‡∏° 100%! ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏¥‡∏ô")
    return true
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ Chicken
local function buyChicken()
    local chickenModel = workspace:FindFirstChild("MapMisc")
        and workspace.MapMisc:FindFirstChild("Purchases")
        and workspace.MapMisc.Purchases:FindFirstChild("Chicken")
        and workspace.MapMisc.Purchases.Chicken:FindFirstChild("Chicken")

    if not chickenModel then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Chicken!")
        return
    end

    -- ‚úÖ ‡∏´‡∏≤ ClickDetector ‡πÉ‡∏ô Chicken Model ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    local clickDetector = chickenModel:FindFirstChild("ClickDetector")

    if not clickDetector then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ClickDetector ‡πÉ‡∏ô Chicken!")
        return
    end

    -- ‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô
    local handle = chickenModel:FindFirstChild("Handle")
    local targetPosition = handle and handle.Position or chickenModel:GetPivot().Position
    print("üö∂‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠ Chicken ‡∏ó‡∏µ‡πà:", targetPosition)
    moveToPosition(targetPosition + Vector3.new(0, 0, 2))

    wait(0.5) -- ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÜ

    -- ‚úÖ ‡∏Å‡∏î‡∏ã‡∏∑‡πâ‡∏≠
    print("üõí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏ã‡∏∑‡πâ‡∏≠ Chicken...")
    fireclickdetector(clickDetector)

    wait(2) -- ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á

    -- ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏´‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏¥‡∏ô‡πÄ‡∏•‡∏¢
    if hasChickenInBackpack() then
        print("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ Chicken ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô...")
        eatChickenUntilFull() -- ‚úÖ ‡∏Å‡∏¥‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏°
    else
        warn("‚ùå ‡∏ã‡∏∑‡πâ‡∏≠ Chicken ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ ClickDetector ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ")
    end
end

-- ‚úÖ **‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ**
local positions = {
    Vector3.new(-1949.08, 4.05, -1648.10),
    Vector3.new(-1951.02, 3.75, -1541.63),
    Vector3.new(-1701.96, 3.75, -1539.03),
    Vector3.new(-1728.35, 4.13, -1610.77),
    Vector3.new(-1740.56, 4.13, -1611.26) -- ‚úÖ ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ = ‡∏à‡∏∏‡∏î‡∏ã‡∏∑‡πâ‡∏≠ Chicken
}

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
local function moveBackThroughPositions()
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")

    for i = #positions, 1, -1 do
        local pos = positions[i]
        print("üö∂‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà:", pos)
        moveToPosition(pos)
    end

    print("‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö
local function moveThroughPositions()
    local hunger = getHungerPercent()
    
    -- ‚ùå ‡∏ñ‡πâ‡∏≤ Hunger ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö HUNGER_THRESHOLD ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏´‡∏ô
    if hunger >= HUNGER_THRESHOLD then
        print("‚úÖ Hunger ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö " .. HUNGER_THRESHOLD .. "%! ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡πÑ‡∏´‡∏ô")
        return
    end

    -- ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Chicken ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Å‡∏¥‡∏ô‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠
    if hasChickenInBackpack() then
        print("üçó ‡∏°‡∏µ Chicken ‡πÉ‡∏ô Backpack ‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏¥‡∏ô‡πÄ‡∏•‡∏¢...")
        eatChickenUntilFull()
        return
    end

    -- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    for _, pos in ipairs(positions) do
        print("üö∂‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà:", pos)
        moveToPosition(pos)
    end

    -- ‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏ô Chicken
    buyChicken()

    -- ‚úÖ ‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    moveBackThroughPositions()
end

-- ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö
moveThroughPositions()
